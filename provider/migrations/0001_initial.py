# Generated by Django 2.1.4 on 2018-12-06 13:45

from django.db import migrations, models
import django.db.models.deletion

import customer.models
import provider.models
import provider.models.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ClearSeaAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('backend_active', models.BooleanField(default=False)),
                ('username_index', models.IntegerField(default=0)),
                ('saved_username', models.CharField(max_length=100)),
                ('user_active_until', models.DateTimeField(blank=True, null=True)),
                ('extension', models.CharField(blank=True, max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='CoSpace',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('secret_key', models.CharField(default=provider.models.utils.new_secret_key, editable=False, max_length=48)),
                ('title', models.CharField(max_length=100)),
                ('uri', models.CharField(max_length=100)),
                ('call_id', models.CharField(blank=True, max_length=50, verbose_name='Call ID')),
                ('secret', models.CharField(blank=True, editable=False, max_length=50, verbose_name='Secret')),
                ('creator', models.CharField(max_length=80)),
                ('group', models.CharField(blank=True, max_length=100)),
                ('force_encryption', models.BooleanField(default=False)),
                ('disable_chat', models.BooleanField(default=False)),
                ('provider_ref', models.CharField(blank=True, max_length=128)),
                ('moderator_password', models.CharField(blank=True, max_length=50, verbose_name='Lösenord')),
                ('lobby', models.BooleanField(default=False)),
                ('activation_ref', models.CharField(blank=True, max_length=128)),
                ('moderator_ref', models.CharField(blank=True, max_length=128)),
                ('ts_auto_remove', models.DateTimeField(blank=True, null=True, verbose_name='Radera efter tidpunkt')),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('shared_key', models.CharField(default=customer.models.new_key, max_length=40)),
                ('meeting_add_seconds_before', models.IntegerField(default=0, verbose_name='Lägg till x sekunder före ett möte')),
                ('meeting_add_seconds_after', models.IntegerField(default=0, verbose_name='Lägg till x sekunder efter ett möte')),
                ('always_enable_external', models.BooleanField(default=True, verbose_name='Registrera alltid clearsea')),
                ('username_prefix', models.CharField(default='user', help_text='Användarnamnet kommer bli detta, ett understreck, och löpnummer', max_length=100, verbose_name='Prefix för användarnamn')),
                ('clearsea_group_name', models.CharField(blank=True, help_text='Måste finnas i clearsea redan', max_length=100, verbose_name='Clearsea gruppnamn')),
                ('acano_tenant_id', models.CharField(blank=True, help_text='Måste finnas i acano', max_length=65, verbose_name='Acano tenant-id')),
                ('recording_user', models.CharField(blank=True, help_text='Måste finnas', max_length=100, verbose_name='Ev. ägare (user) för inspelningar')),
                ('recording_channel', models.CharField(blank=True, help_text='Måste finnas', max_length=100, verbose_name='Ev. kanalnamn för inspelning')),
                ('seevia_key', models.CharField(blank=True, max_length=100, verbose_name='Ev. API-nyckel för seevia')),
                ('cospace_prefix', models.CharField(blank=True, max_length=50, verbose_name='Prefix för nya mötesrum')),
                ('has_custom_messages', models.BooleanField(default=False, editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='CustomerKey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shared_key', models.CharField(max_length=40)),
                ('active', models.BooleanField(default=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='provider.Customer')),
            ],
        ),
        migrations.CreateModel(
            name='LdapProvider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='Beskrivning')),
                ('ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP-nummer')),
                ('hostname', models.CharField(blank=True, max_length=100, verbose_name='DNS-namn')),
                ('base_dn', models.CharField(blank=True, max_length=300, verbose_name='Base DN')),
                ('username', models.CharField(blank=True, max_length=50, verbose_name='Användarnamn')),
                ('password', models.CharField(blank=True, max_length=50, verbose_name='Lösenord')),
            ],
        ),
        migrations.CreateModel(
            name='Meeting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('secret_key', models.CharField(default=provider.models.utils.new_secret_key, max_length=48)),
                ('title', models.CharField(blank=True, max_length=100)),
                ('creator', models.CharField(max_length=80)),
                ('creator_ip', models.GenericIPAddressField()),
                ('ts_created', models.DateTimeField(auto_now_add=True)),
                ('internal_clients', models.IntegerField(blank=True, default=0)),
                ('external_clients', models.IntegerField(blank=True, null=True)),
                ('is_internal_meeting', models.BooleanField(default=False)),
                ('layout', models.CharField(choices=[('automatic', 'Automatisk'), ('allEqual', 'Dela utrymme mellan deltagare'), ('speakerOnly', 'Endast talare'), ('telepresence', 'Talare med övriga deltagare flytande'), ('stacked', 'Talare med övriga deltagare under')], default='allEqual', max_length=20, verbose_name='Skärmlayout')),
                ('source', models.CharField(blank=True, default='outlook', max_length=100, verbose_name='Källa')),
                ('password', models.CharField(max_length=20)),
                ('ts_start', models.DateTimeField()),
                ('ts_stop', models.DateTimeField()),
                ('is_recurring', models.BooleanField(default=False)),
                ('recurring', models.CharField(blank=True, max_length=100)),
                ('recurring_exceptions', models.CharField(blank=True, max_length=200)),
                ('room_info', models.TextField(blank=True)),
                ('settings', models.TextField(blank=True)),
                ('recording', models.TextField(blank=True)),
                ('webinar', models.TextField(blank=True)),
                ('backend_active', models.BooleanField(default=False)),
                ('is_superseded', models.BooleanField(default=False)),
                ('customer_confirmed', models.DateTimeField(blank=True, null=True)),
                ('provider_ref', models.CharField(blank=True, max_length=128)),
                ('provider_ref2', models.CharField(blank=True, max_length=128)),
                ('provider_secret', models.CharField(blank=True, max_length=128)),
                ('existing_ref', models.BooleanField(blank=True, default=False)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='provider.Customer', verbose_name='Kund')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prev_bookings', to='provider.Meeting')),
            ],
        ),
        migrations.CreateModel(
            name='MeetingDialoutEndpoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uri', models.CharField(max_length=200)),
                ('provider_ref', models.CharField(max_length=100)),
                ('backend_active', models.BooleanField(default=False)),
                ('ts_activated', models.DateTimeField(null=True)),
                ('ts_deactivated', models.DateTimeField(null=True)),
                ('meeting', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='provider.Meeting')),
            ],
        ),
        migrations.CreateModel(
            name='MeetingRecording',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200)),
                ('recording_id', models.CharField(blank=True, max_length=100)),
                ('recording_id2', models.CharField(blank=True, max_length=100)),
                ('is_public', models.BooleanField(default=True)),
                ('is_live', models.BooleanField(default=True)),
                ('backend_active', models.BooleanField(default=False)),
                ('ts_activated', models.DateTimeField(null=True)),
                ('ts_deactivated', models.DateTimeField(null=True)),
                ('embed_code', models.TextField()),
                ('video_sources', models.TextField()),
                ('error', models.TextField(blank=True)),
                ('ts_callback_sent', models.DateTimeField(null=True)),
                ('retry_count', models.SmallIntegerField(default=0)),
                ('meeting', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='provider.Meeting')),
            ],
        ),
        migrations.CreateModel(
            name='MeetingWebinar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.CharField(blank=True, max_length=100)),
                ('access_method_id', models.CharField(blank=True, max_length=128)),
                ('provider_ref', models.CharField(blank=True, max_length=128)),
                ('provider_secret', models.CharField(blank=True, max_length=128)),
                ('password', models.CharField(blank=True, max_length=50, verbose_name='Lösenord')),
                ('meeting', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='webinars', to='provider.Meeting')),
            ],
        ),
        migrations.CreateModel(
            name='Provider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='Beskrivning')),
                ('is_standard', models.BooleanField(blank=True, default=False, help_text='Används som standard för kunder som inte har en specifik provider angedd', verbose_name='Är fallback')),
                ('ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP-nummer')),
                ('hostname', models.CharField(blank=True, max_length=100, verbose_name='DNS-namn')),
                ('api_host', models.CharField(blank=True, max_length=100, verbose_name='Ev. separat api-ip/host')),
                ('web_host', models.CharField(blank=True, max_length=100, verbose_name='Ev. separat hostname för webbaccess')),
                ('type', models.IntegerField(choices=[(0, 'LifeSize/Acano'), (1, 'ClearSea'), (2, 'Internal')])),
                ('subtype', models.IntegerField(blank=True, choices=[(0, 'LifeSize'), (1, 'Acano')], null=True)),
                ('internal_domains', models.CharField(blank=True, help_text='Kommaseparerade', max_length=200, verbose_name='Interna domäner')),
                ('username', models.CharField(blank=True, max_length=50, verbose_name='Användarnamn')),
                ('password', models.CharField(blank=True, max_length=50, verbose_name='Lösenord')),
                ('groupname', models.CharField(blank=True, help_text='Används för clearsea', max_length=50, verbose_name='Gruppnamn')),
                ('session_id', models.CharField(blank=True, max_length=200)),
                ('session_expires', models.DateTimeField(blank=True, null=True)),
                ('options', models.TextField(blank=True)),
            ],
            options={
                'permissions': (('api_client', 'Can use API-client'),),
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_number', models.CharField(max_length=100)),
                ('meeting', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='provider.Meeting')),
            ],
        ),
        migrations.CreateModel(
            name='SeeviaProvider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='Beskrivning')),
                ('is_test', models.BooleanField(blank=True, default=False, verbose_name='Använd testserver')),
                ('username', models.CharField(blank=True, max_length=64, verbose_name='Användarnamn')),
                ('password', models.CharField(blank=True, max_length=64, verbose_name='Lösenord')),
            ],
        ),
        migrations.CreateModel(
            name='TandbergProvider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hostname', models.CharField(blank=True, max_length=100, verbose_name='DNS-namn')),
                ('mac_address', models.CharField(blank=True, max_length=100, verbose_name='MAC-adress för verifiering')),
                ('default_domain', models.CharField(blank=True, max_length=100, verbose_name='Standarddomän för URIs utan')),
            ],
        ),
        migrations.CreateModel(
            name='VCSEProvider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='Beskrivning')),
                ('hostname', models.CharField(blank=True, max_length=100, verbose_name='DNS-namn')),
                ('username', models.CharField(blank=True, max_length=50, verbose_name='Användarnamn')),
                ('password', models.CharField(blank=True, max_length=50, verbose_name='Lösenord')),
                ('session_id', models.TextField(blank=True)),
                ('session_expires', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='VideoCenterProvider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(0, 'Videocenter'), (10, 'Rec.VC')], default=0)),
                ('is_standard', models.BooleanField(blank=True, default=False, help_text='Används som standard för kunder som inte har en specifik provider angedd', verbose_name='Är fallback')),
                ('title', models.CharField(max_length=50, verbose_name='Beskrivning')),
                ('ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP-nummer')),
                ('hostname', models.CharField(blank=True, max_length=100, verbose_name='DNS-namn')),
                ('api_host', models.CharField(blank=True, max_length=100, verbose_name='Ev. separat api-ip/host')),
                ('web_host', models.CharField(blank=True, max_length=100, verbose_name='Ev. separat hostname för webbaccess')),
                ('username', models.CharField(blank=True, max_length=50, verbose_name='Användarnamn')),
                ('password', models.CharField(blank=True, max_length=50, verbose_name='Lösenord')),
                ('channel', models.CharField(blank=True, max_length=50, verbose_name='Channel')),
                ('recording_key', models.CharField(blank=True, max_length=50, verbose_name='Recording-key')),
                ('session_id', models.CharField(blank=True, max_length=200)),
                ('session_expires', models.DateTimeField(blank=True, null=True)),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='provider.Customer', verbose_name='Kund')),
            ],
        ),
        migrations.AddField(
            model_name='meetingrecording',
            name='provider',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='provider.VideoCenterProvider'),
        ),
        migrations.AddField(
            model_name='meeting',
            name='provider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='provider.Provider'),
        ),
        migrations.AddField(
            model_name='customer',
            name='clearsea_provider',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='provider.Provider'),
        ),
        migrations.AddField(
            model_name='customer',
            name='lifesize_provider',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='provider.Provider', verbose_name='Video-provider'),
        ),
        migrations.AddField(
            model_name='customer',
            name='videocenter_provider',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='provider.VideoCenterProvider'),
        ),
        migrations.AddField(
            model_name='cospace',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='provider.Customer'),
        ),
        migrations.AddField(
            model_name='cospace',
            name='provider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='provider.Provider'),
        ),
        migrations.AddField(
            model_name='clearseaaccount',
            name='meeting',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='provider.Meeting'),
        ),
        migrations.AddField(
            model_name='clearseaaccount',
            name='provider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='provider.Provider'),
        ),
        migrations.AlterUniqueTogether(
            name='clearseaaccount',
            unique_together={('provider', 'meeting')},
        ),
    ]
