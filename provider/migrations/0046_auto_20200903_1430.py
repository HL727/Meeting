# Generated by Django 2.2.6 on 2020-09-03 12:30

from django.db import migrations, models
import django.db.models.deletion


def connect_clusters(apps, schema_editor):
    AcanoCluster = apps.get_model('provider', 'AcanoCluster')
    Provider = apps.get_model('provider', 'Provider')
    PexipCluster = apps.get_model('provider', 'PexipCluster')
    ClusterSettings = apps.get_model('provider', 'ClusterSettings')

    CoSpace = apps.get_model('datastore', 'CoSpace')
    User = apps.get_model('datastore', 'User')
    ProviderSync = apps.get_model('datastore', 'ProviderSync')
    Meeting = apps.get_model('provider', 'Meeting')

    Server = apps.get_model('statistics', 'Server')

    for provider in Provider.objects.filter(type=0):

        provider.refresh_from_db()
        if provider.cluster_id:
            continue

        created = False
        if provider.subtype in (1, 4):  # acano

            existing = provider.clustered.filter(cluster__isnull=False).first()
            if existing:
                provider.cluster = existing.cluster
            else:
                ACANO_CLUSTER = 4
                provider.cluster = AcanoCluster.objects.create(title='{} cluster'.format(provider.title), type=ACANO_CLUSTER)
                created = provider.cluster
                try:
                    ProviderSync.objects.filter(provider=provider).update(provider=provider.cluster)
                except Exception:
                    pass
                try:
                    CoSpace.objects.filter(provider=provider).update(provider=provider.cluster)
                except Exception:
                    pass
                try:
                    User.objects.filter(provider=provider).update(provider=provider.cluster)
                except Exception:
                    pass
                try:
                    Meeting.objects.filter(provider=provider).update(provider=provider.cluster)
                except Exception:
                    pass

                old_default_server = Server.objects.filter(
                    type=0, name='CMS', cluster__isnull=True
                ).first()
                if old_default_server and not Server.objects.filter(type=0).exclude(
                    pk=old_default_server.pk
                ):
                    old_default_server.cluster = created
                    old_default_server.save()

            provider.save()

        if provider.subtype in (2, 3):  # pexip

            existing = provider.filter(cluster__isnull=False).first()
            if existing:
                provider.cluster = existing.cluster
            else:
                PEXIP_CLUSTER = 6
                provider.cluster = PexipCluster.objects.create(title='{} cluster'.format(provider.title), type=PEXIP_CLUSTER)
                created = provider.cluster
            provider.save()

        internal_domain = provider.internal_domains.split(',')[0] or provider.hostname

        if created:
            ClusterSettings.objects.create(
                cluster=created,
                main_domain=internal_domain,
                web_domain=provider.web_host,
                phone_ivr=provider.phone_ivr,
            )


class Migration(migrations.Migration):

    dependencies = [
        ('provider', '0045_merge_20200625_1210'),
        ('datastore', '0007_auto_20200128_1130'),
        ('statistics', '0027_auto_20200228_2015'),
    ]

    operations = [
        migrations.AlterField(
            model_name='provider',
            name='ip',
            field=models.GenericIPAddressField(blank=True, null=False, verbose_name='IP-nummer'),
        ),
        migrations.AlterField(
            model_name='provider',
            name='ip',
            field=models.GenericIPAddressField(blank=True, null=True, verbose_name='IP-nummer'),
        ),
        migrations.AlterField(
            model_name='customer',
            name='lifesize_provider',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='customers', to='provider.Cluster', verbose_name='Video-provider'),
        ),
        migrations.AlterField(
            model_name='customer',
            name='lifesize_provider',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='customers', to='provider.Cluster', verbose_name='Video-provider'),
        ),
        migrations.AddField(
            model_name='clustersettings',
            name='phone_ivr',
            field=models.CharField(blank=True, max_length=25, verbose_name='Telefonnummer för uppringning'),
        ),
        migrations.AddField(
            model_name='clustersettings',
            name='web_domain',
            field=models.CharField(blank=True, max_length=100, verbose_name='Ev. separat domän för webbaccess'),
        ),
        migrations.RunPython(connect_clusters, migrations.RunPython.noop)
    ]
